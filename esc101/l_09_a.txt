<!-- HTML generated using hilite.me --><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #557799">#include&lt;stdio.h&gt;</span>
<span style="color: #557799">#include&lt;math.h&gt;</span>
<span style="color: #888888">//Struct</span>
<span style="color: #008800; font-weight: bold">struct</span> complex
{
    <span style="color: #333399; font-weight: bold">int</span> real;
    <span style="color: #333399; font-weight: bold">int</span> complex;
};

<span style="color: #888888">// Multiplication fucntion</span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">Multiply</span>(<span style="color: #008800; font-weight: bold">struct</span> complex a, <span style="color: #008800; font-weight: bold">struct</span> complex b){
    <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">int</span> x,y;              <span style="color: #888888">//mathematics</span>
    
    x <span style="color: #333333">=</span> (<span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">int</span>)(a.real) <span style="color: #333333">*</span> (b.real) <span style="color: #333333">-</span> (<span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">int</span>)(a.complex) <span style="color: #333333">*</span> (b.complex);
    y <span style="color: #333333">=</span> (<span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">int</span>)(a.real) <span style="color: #333333">*</span> (b.complex) <span style="color: #333333">+</span> (<span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">int</span>)(a.complex) <span style="color: #333333">*</span> (b.real);
    
    printf(<span style="background-color: #fff0f0">&quot;%lld %lld</span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\n</span><span style="background-color: #fff0f0">&quot;</span>, x, y);
}

<span style="color: #888888">//Division function</span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">Division</span>(<span style="color: #008800; font-weight: bold">struct</span> complex a, <span style="color: #008800; font-weight: bold">struct</span> complex b){
    <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">int</span> x,y;              <span style="color: #888888">//some more mathematics</span>
    
    <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">int</span> t <span style="color: #333333">=</span> (<span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">int</span>)(b.real) <span style="color: #333333">*</span> (b.real) <span style="color: #333333">+</span> (<span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">int</span>)(b.complex) <span style="color: #333333">*</span> (b.complex);
    
    x <span style="color: #333333">=</span> (<span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">int</span>)(a.real) <span style="color: #333333">*</span> (b.real) <span style="color: #333333">+</span> (<span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">int</span>)(a.complex) <span style="color: #333333">*</span> (b.complex);
    y <span style="color: #333333">=</span> (<span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">int</span>)(a.complex) <span style="color: #333333">*</span> (b.real) <span style="color: #333333">-</span> (<span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">long</span> <span style="color: #333399; font-weight: bold">int</span>)(a.real) <span style="color: #333333">*</span> (b.complex);
    
    x <span style="color: #333333">=</span> floor((<span style="color: #333399; font-weight: bold">double</span>)x<span style="color: #333333">/</span>t);
    y <span style="color: #333333">=</span> floor((<span style="color: #333399; font-weight: bold">double</span>)y<span style="color: #333333">/</span>t);
    
    printf(<span style="background-color: #fff0f0">&quot;%lld %lld</span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\n</span><span style="background-color: #fff0f0">&quot;</span>, x, y);
}

<span style="color: #333399; font-weight: bold">int</span> <span style="color: #0066BB; font-weight: bold">main</span>()
{
    <span style="color: #008800; font-weight: bold">struct</span> complex a,b;                     <span style="color: #888888">//input</span>
    
    scanf(<span style="background-color: #fff0f0">&quot;%d %d&quot;</span>, <span style="color: #333333">&amp;</span>a.real, <span style="color: #333333">&amp;</span>a.complex);
    scanf(<span style="background-color: #fff0f0">&quot;%d %d&quot;</span>, <span style="color: #333333">&amp;</span>b.real, <span style="color: #333333">&amp;</span>b.complex);
    
    <span style="color: #888888">//desired outputs</span>
    printf(<span style="background-color: #fff0f0">&quot;%ld %ld</span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\n</span><span style="background-color: #fff0f0">&quot;</span>, (<span style="color: #333399; font-weight: bold">long</span>)(a.real <span style="color: #333333">+</span> b.real), (<span style="color: #333399; font-weight: bold">long</span>)(a.complex <span style="color: #333333">+</span> b.complex));
    Multiply(a, b);
    Division(a, b);
    
    <span style="color: #008800; font-weight: bold">return</span> <span style="color: #0000DD; font-weight: bold">0</span>;
}
<span style="color: #333333">-----------------------------------</span>
<span style="color: #557799">#include &lt;stdio.h&gt;</span>
<span style="color: #557799">#include &lt;math.h&gt;</span>
<span style="color: #008800; font-weight: bold">struct</span> coordinate{
	<span style="color: #333399; font-weight: bold">double</span> x;
	<span style="color: #333399; font-weight: bold">double</span> y;
};
<span style="color: #008800; font-weight: bold">struct</span> circle{
	<span style="color: #008800; font-weight: bold">struct</span> coordinate point;
	<span style="color: #333399; font-weight: bold">double</span> radius;
};
<span style="color: #888888">// check if interect</span>
<span style="color: #333399; font-weight: bold">double</span> <span style="color: #0066BB; font-weight: bold">check</span>(<span style="color: #008800; font-weight: bold">struct</span> circle<span style="color: #333333">*</span> c1,<span style="color: #008800; font-weight: bold">struct</span> circle<span style="color: #333333">*</span> c2){
	<span style="color: #333399; font-weight: bold">double</span> d <span style="color: #333333">=</span> ((<span style="color: #333333">*</span>c1).point.x <span style="color: #333333">-</span> (<span style="color: #333333">*</span>c2).point.x) <span style="color: #333333">*</span> ((<span style="color: #333333">*</span>c1).point.x <span style="color: #333333">-</span> (<span style="color: #333333">*</span>c2).point.x) <span style="color: #333333">+</span> ((<span style="color: #333333">*</span>c1).point.y <span style="color: #333333">-</span> (<span style="color: #333333">*</span>c2).point.y) <span style="color: #333333">*</span> ((<span style="color: #333333">*</span>c1).point.y <span style="color: #333333">-</span> (<span style="color: #333333">*</span>c2).point.y);
	
    <span style="color: #333399; font-weight: bold">double</span> r <span style="color: #333333">=</span> ((<span style="color: #333333">*</span>c1).radius <span style="color: #333333">+</span> (<span style="color: #333333">*</span>c2).radius) <span style="color: #333333">*</span> ((<span style="color: #333333">*</span>c1).radius <span style="color: #333333">+</span> (<span style="color: #333333">*</span>c2).radius);
    <span style="color: #008800; font-weight: bold">return</span> <span style="color: #333333">!</span>(r <span style="color: #333333">&lt;</span> d );
}

<span style="color: #333399; font-weight: bold">int</span> <span style="color: #0066BB; font-weight: bold">main</span>(){
	<span style="color: #333399; font-weight: bold">int</span> n;
	scanf(<span style="background-color: #fff0f0">&quot;%d&quot;</span>, <span style="color: #333333">&amp;</span>n);
	<span style="color: #888888">//input all</span>
	<span style="color: #008800; font-weight: bold">struct</span> circle a[n];
	
	<span style="color: #008800; font-weight: bold">for</span>(<span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>; i<span style="color: #333333">&lt;</span>n; i<span style="color: #333333">++</span>)
	    scanf(<span style="background-color: #fff0f0">&quot;%lf %lf %lf&quot;</span>, <span style="color: #333333">&amp;</span>a[i].point.x, <span style="color: #333333">&amp;</span>a[i].point.y, <span style="color: #333333">&amp;</span>a[i].radius);
	
	<span style="color: #333399; font-weight: bold">int</span> m;
	scanf(<span style="background-color: #fff0f0">&quot;%d&quot;</span>, <span style="color: #333333">&amp;</span>m);
	<span style="color: #008800; font-weight: bold">struct</span> circle b[m];
	
	<span style="color: #008800; font-weight: bold">for</span>(<span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>; i<span style="color: #333333">&lt;</span>m; i<span style="color: #333333">++</span>)
	    scanf(<span style="background-color: #fff0f0">&quot;%lf %lf %lf&quot;</span>, <span style="color: #333333">&amp;</span>b[i].point.x, <span style="color: #333333">&amp;</span>b[i].point.y, <span style="color: #333333">&amp;</span>b[i].radius);
	<span style="color: #888888">// run and see for all</span>
	<span style="color: #008800; font-weight: bold">for</span>(<span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>; i<span style="color: #333333">&lt;</span>m; i<span style="color: #333333">++</span>){
	    <span style="color: #333399; font-weight: bold">int</span> count<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>;
	    <span style="color: #008800; font-weight: bold">for</span>(<span style="color: #333399; font-weight: bold">int</span> j<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>; j<span style="color: #333333">&lt;</span>n; j<span style="color: #333333">++</span>)
	        <span style="color: #008800; font-weight: bold">if</span>(check(b<span style="color: #333333">+</span>i, a<span style="color: #333333">+</span>j))
	            count<span style="color: #333333">++</span>;
	    printf(<span style="background-color: #fff0f0">&quot;%d</span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\n</span><span style="background-color: #fff0f0">&quot;</span>, count);
	}
	
	<span style="color: #008800; font-weight: bold">return</span> <span style="color: #0000DD; font-weight: bold">0</span>;
}
<span style="color: #333333">------------------------------------</span>
<span style="color: #557799">#include&lt;stdio.h&gt;</span>
<span style="color: #888888">// All Structures</span>
<span style="color: #008800; font-weight: bold">struct</span> date
{
    <span style="color: #333399; font-weight: bold">int</span> dd;
    <span style="color: #333399; font-weight: bold">int</span> mm;
    <span style="color: #333399; font-weight: bold">int</span> yy;
};
<span style="color: #008800; font-weight: bold">struct</span> tme
{
    <span style="color: #333399; font-weight: bold">int</span> hour;
    <span style="color: #333399; font-weight: bold">int</span> min;
    <span style="color: #333399; font-weight: bold">int</span> sec;
};
<span style="color: #008800; font-weight: bold">struct</span> timestamp
{
    <span style="color: #008800; font-weight: bold">struct</span> date dt;
    <span style="color: #008800; font-weight: bold">struct</span> tme tme;
};

<span style="color: #888888">//Read input</span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">read</span>(<span style="color: #008800; font-weight: bold">struct</span> timestamp <span style="color: #333333">*</span>t){
    scanf(<span style="background-color: #fff0f0">&quot;%d %d %d&quot;</span>, <span style="color: #333333">&amp;</span>t<span style="color: #333333">-&gt;</span>dt.dd, <span style="color: #333333">&amp;</span>t<span style="color: #333333">-&gt;</span>dt.mm, <span style="color: #333333">&amp;</span>t<span style="color: #333333">-&gt;</span>dt.yy);
    scanf(<span style="background-color: #fff0f0">&quot;%d %d %d&quot;</span>, <span style="color: #333333">&amp;</span>t<span style="color: #333333">-&gt;</span>tme.hour, <span style="color: #333333">&amp;</span>t<span style="color: #333333">-&gt;</span>tme.min, <span style="color: #333333">&amp;</span>t<span style="color: #333333">-&gt;</span>tme.sec);
}

<span style="color: #888888">//Give Output</span>
<span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">print</span>(<span style="color: #008800; font-weight: bold">struct</span> timestamp <span style="color: #333333">*</span>t){
    printf(<span style="background-color: #fff0f0">&quot;%d %d %d &quot;</span>, t<span style="color: #333333">-&gt;</span>dt.dd, t<span style="color: #333333">-&gt;</span>dt.mm, t<span style="color: #333333">-&gt;</span>dt.yy);
    printf(<span style="background-color: #fff0f0">&quot;%d %d %d</span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\n</span><span style="background-color: #fff0f0">&quot;</span>, t<span style="color: #333333">-&gt;</span>tme.hour, t<span style="color: #333333">-&gt;</span>tme.min, t<span style="color: #333333">-&gt;</span>tme.sec);
}

<span style="color: #888888">//Compare two stuct</span>
<span style="color: #333399; font-weight: bold">int</span> <span style="color: #0066BB; font-weight: bold">compare</span>(<span style="color: #008800; font-weight: bold">struct</span> timestamp a, <span style="color: #008800; font-weight: bold">struct</span> timestamp b){
    <span style="color: #008800; font-weight: bold">if</span>(a.dt.yy<span style="color: #333333">!=</span>b.dt.yy)
        <span style="color: #008800; font-weight: bold">return</span> a.dt.yy <span style="color: #333333">&lt;</span> b.dt.yy;
    
    <span style="color: #008800; font-weight: bold">if</span>(a.dt.mm<span style="color: #333333">!=</span>b.dt.mm)
        <span style="color: #008800; font-weight: bold">return</span> a.dt.mm <span style="color: #333333">&lt;</span> b.dt.mm;
    
    <span style="color: #008800; font-weight: bold">if</span>(a.dt.dd<span style="color: #333333">!=</span>b.dt.dd)
        <span style="color: #008800; font-weight: bold">return</span> a.dt.dd <span style="color: #333333">&lt;</span> b.dt.dd;
    
    <span style="color: #008800; font-weight: bold">if</span>(a.tme.hour<span style="color: #333333">!=</span>b.tme.hour)
        <span style="color: #008800; font-weight: bold">return</span> a.tme.hour <span style="color: #333333">&lt;</span> b.tme.hour;
    
    <span style="color: #008800; font-weight: bold">if</span>(a.tme.min<span style="color: #333333">!=</span>b.tme.min)
        <span style="color: #008800; font-weight: bold">return</span> a.tme.min <span style="color: #333333">&lt;</span> b.tme.min;
    
    <span style="color: #008800; font-weight: bold">return</span> a.tme.sec <span style="color: #333333">&lt;</span> b.tme.sec;
}

<span style="color: #333399; font-weight: bold">int</span> <span style="color: #0066BB; font-weight: bold">main</span>()
{
    <span style="color: #333399; font-weight: bold">int</span> n;
    scanf(<span style="background-color: #fff0f0">&quot;%d&quot;</span>, <span style="color: #333333">&amp;</span>n);
    
    <span style="color: #008800; font-weight: bold">struct</span> timestamp a[n];      <span style="color: #888888">//Array of everything</span>
    
    <span style="color: #008800; font-weight: bold">for</span>(<span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>; i<span style="color: #333333">&lt;</span>n; i<span style="color: #333333">++</span>)      <span style="color: #888888">// Take input</span>
        read(a<span style="color: #333333">+</span>i);
    
    <span style="color: #888888">//Sort the Structure</span>
    <span style="color: #008800; font-weight: bold">for</span>(<span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>; i<span style="color: #333333">&lt;</span>n;i<span style="color: #333333">++</span>)
        <span style="color: #008800; font-weight: bold">for</span>(<span style="color: #333399; font-weight: bold">int</span> j<span style="color: #333333">=</span>i<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">1</span>; j<span style="color: #333333">&lt;</span>n; j<span style="color: #333333">++</span>)
            <span style="color: #008800; font-weight: bold">if</span>(compare(a[j], a[i])){
                <span style="color: #008800; font-weight: bold">struct</span> timestamp temp <span style="color: #333333">=</span>a[i];
                a[i]<span style="color: #333333">=</span>a[j];
                a[j]<span style="color: #333333">=</span>temp;
            }
    
    <span style="color: #888888">//output cout</span>
    printf(<span style="background-color: #fff0f0">&quot;%d</span><span style="color: #666666; font-weight: bold; background-color: #fff0f0">\n</span><span style="background-color: #fff0f0">&quot;</span>, n);
    <span style="color: #008800; font-weight: bold">for</span>(<span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span>; i<span style="color: #333333">&lt;</span>n; i<span style="color: #333333">++</span>)
        print(a<span style="color: #333333">+</span>i);
    <span style="color: #888888">//Bye Bye</span>
    <span style="color: #008800; font-weight: bold">return</span> <span style="color: #0000DD; font-weight: bold">0</span>;
}
</pre></div>
